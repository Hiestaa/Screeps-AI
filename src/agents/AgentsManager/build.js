const {
    AT_CREEP_ACTOR
} = require('constants');
const logger = require('log').getLogger('agents.AgentsManager.build', '#FC00FF');

/**
 * When creating an agent that is associated with an update of the game state,
 * it might take one or more ticks to actually see the game object poping up in
 * the game state.
 * Such agent will be added to the list of pending agent, which will
 * be checked at the beginning of each tick. When the related game object is
 * found, the specified agent will receive a call to its `handleNewAgent` method.
 */

// list of pending new agents. each item should be an object of the form:
// `{type, id, handlerId, }
Memory.pendingNewAgents = Memory.pendingNewAgents || [];

/**
 * Spawn a creep of the given profile (name is generated by the profile)
 * Build a creep actor of the given profile
 * Save the actor as pending agent, associated with the specified architect id.
 * When the creep creation is completed (detected by looking at the
 * `Game.creeps` object), the architect specified by id see its `handleNewAgent`
 * function called.
 * If spawn creation failed, no actor will be created.
 * @param {StructureSpawn} spawn - the spawn structure the creep should be spawned from
 * @param {CreepProfile} creepActorMemory - preinitialized memory for the creep to spawn.
 * @param {CreepProfile} profile - instance of the creep profile
 * @param {String} architectId - id of the architect that will be in charge of the creep.
 * @return {Integer} - code returned by `spawnCreep`
 */
exports.buildPendingCreepActor = (spawnActor, creepActorMemory, profile, architectId) => {
    const creepName = profile.getCreepName();

    const code = spawnActor.spawnCreep(profile.bodyParts, creepName, profile.cost, {
        memory: creepActorMemory
    });
    if (code !== OK) {
        logger.failure(code, 'Unable to build creep actor ' + creepName);
        return code;
    }

    Memory.pendingNewAgents.push({
        type: AT_CREEP_ACTOR,
        id: creepName,
        handlerId: architectId,
        profile: profile.name
    });

    return code;
};

/**
 * Execute a function for each pending new agent.
 * If the function returns `true`, the agent creation is assumed successfull,
 * and the object will be removed from the list of pending new agents.
 * @param {Function} fn - the function to execute for each pending new agent.
 *                        it should expect a single parameter as an object with the structure:
 *                        `{type, id, handlerId, profile}`
 */
exports.forEachPendingAgents = (fn) => {
    const created = [];
    Memory.pendingNewAgents.forEach(({type, id, handlerId, profile}, idx) => {
        if (fn({type, id, handlerId, profile})) {
            created.push(idx);
        }
    });

    // remove all created pending new agents
    Memory.pendingNewAgents = Memory.pendingNewAgents.filter((itm, idx) => {
        return created.indexOf(idx) === -1;
    });
};
