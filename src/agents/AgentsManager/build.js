const {
    AT_CREEP_ACTOR
} = require('constants');
CreepActor = require('agents.CreepActor');
{
    getAgentById
} = require('agents.AgentsManager.storage');

/**
 * When creating an agent that is associated with an update of the game state,
 * it might take one or more ticks to actually see the game object poping up in
 * the game state.
 * Such agent will be added to the list of pending agent, which will
 * be checked at the beginning of each tick. When the related game object is
 * found, the specified agent will receive a call to its `handleNewAgent` method.
 */

// list of pending new agents. each item should be an object of the form:
// `{type, id, handlerId, }
Memory.pendingNewAgents = Memory.pendingNewAgents || [];

/**
 * Spawn a creep of the given profile (name is generated by the profile)
 * Build a creep actor of the given profile
 * Save the actor as pending agent, associated with the specified architect id.
 * When the creep creation is completed (detected by looking at the
 * `Game.creeps` object), the architect specified by id see its `handleNewAgent`
 * function called.
 * If spawn creation failed, no actor will be created.
 * @param {StructureSpawn} spawn - the spawn structure the creep should be spawned from
 * @param {CreepProfile} profile - instance of the creep profile
 * @param {String} architectId - id of the architect that will be in charge of the creep.
 * @return {Integer} - code returned by `spawnCreep`
 */
exports.buildPendingCreepActor = (spawn, profile, architectId) => {
    const creepName = profile.getCreepName();
    const code = spawn.spawnCreep(profile.bodyParts, creepName);
    if (code !== OK) {
        console.log('[ERROR][AGENT MANAGER STORAGE] Unable to build creep actor ' + creepName);
        return code;
    }

    Memory.pendingNewAgents.push({
        type: AT_CREEP_ACTOR,
        id: creepName,
        handlerId: architectId
    });

    return code;
}

/**
 * Verify if any of the pending new agent is ready for creation.
 * If so, build the agent and add it to the agents list,
 * retrieve the agent that should handle the creation, call into its
 * `handleNewAgent` function, then remove the agent from the pending new agents.
 */
exports.verifyPendingAgents = () => {
    const created = [];
    Memory.pendingNewAgents.forEach(({type, id, handlerId}, idx) => {
        if (type === AT_CREEP_ACTOR) {
            // creeps are id'ed by name in this array
            const creep = Game.creeps[id];
            if (!creep) { return; }
            const creepActor = new CreepActor();
            creepActor.initialize(creep);
            const agent = getAgentById(handlerId);
            agent.handleNewAgent(agent);
        }
        else {
            console.log(
                '[ERROR][AGENT MANAGER STORAGE] Dont\'t know ' +
                'what to do with pending agent type: ', type);
        }
    }

    created.forEach(idx => {
        Memory.pendingNewAgents.splice(idx, 1);
    })
}
